def gitCommit
def serviceAccount = env.SERVICE_ACCOUNT ?: "default"
def namespace = env.NAMESPACE ?: "default"
def volumes = [ hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock') ]
volumes += secretVolume(secretName: 'microclimate-registry-secret', mountPath: '/msb_reg_sec')
volumes += secretVolume(secretName: 'microclimate-helm-secret', mountPath: '/msb_helm_sec')

podTemplate(label: 'icp-was-build-1', serviceAccount: serviceAccount, namespace: namespace,
    containers: [
        containerTemplate(name: 'maven', image: 'maven:3.5.3-jdk-8', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'docker', image: 'docker:18.06.1-ce', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'kubectl', image: 'ibmcom/microclimate-utils:1901', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'helm', image: 'ibmcom/microclimate-k8s-helm:v2.9.1', ttyEnabled: true, command: 'cat')
    ],
    volumes: volumes
)
{
    node ('icp-was-build-1') {
        stage ('Extract') {
            checkout scm
            gitCommit = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
            echo "checked out git commit ${gitCommit}"
            stash excludes: 'target/', name: 'source'
        }
        stage ('Maven Build') {
          container('maven') {
            sh '''
            cd CustomerOrderServicesProject
            mvn clean package
            '''
          }
        }
        stage ('Docker Build') {
          container('docker') {
            def imageTag = "mycluster.icp:8500/default/twas:${gitCommit}"
            echo "imageTag ${imageTag}"
            sh """
            cd Deployment/Docker
            ln -s /msb_reg_sec/.dockercfg /home/jenkins/.dockercfg
            mkdir /home/jenkins/.docker
            ln -s /msb_reg_sec/.dockerconfigjson /home/jenkins/.docker/config.json
            docker build -t $imageTag .
            docker push $imageTag
            """
          }
        }
        stage ('Deploy using Helm') {
          container('helm') {
            sh """
            cd Deployment/Docker
            helm init --skip-refresh --client-only
            helm repo add ibm-charts https://raw.githubusercontent.com/IBM/charts/master/repo/stable/ 
            helm repo list
            helm upgrade --install --wait --values override-values.yaml  my-twas-app ibm-charts/ibm-websphere-traditional --set image.tag=${gitCommit} --tls --tls-ca-cert=/msb_helm_sec/ca.pem --tls-cert=/msb_helm_sec/cert.pem --tls-key=/msb_helm_sec/key.pem
            """  
        } 
    }
  }
}
